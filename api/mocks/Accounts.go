// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	ent "github.com/richmondwang/golang-wallet-api/ent"
	mock "github.com/stretchr/testify/mock"
)

// Accounts is an autogenerated mock type for the Accounts type
type Accounts struct {
	mock.Mock
}

// AddAccount provides a mock function with given fields: ctx, name, initialBalance
func (_m *Accounts) AddAccount(ctx context.Context, name string, initialBalance float64) (*ent.Account, error) {
	ret := _m.Called(ctx, name, initialBalance)

	if len(ret) == 0 {
		panic("no return value specified for AddAccount")
	}

	var r0 *ent.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) (*ent.Account, error)); ok {
		return rf(ctx, name, initialBalance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) *ent.Account); ok {
		r0 = rf(ctx, name, initialBalance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, float64) error); ok {
		r1 = rf(ctx, name, initialBalance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllTransactions provides a mock function with given fields: ctx, account
func (_m *Accounts) AllTransactions(ctx context.Context, account *ent.Account) (ent.Transactions, error) {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for AllTransactions")
	}

	var r0 ent.Transactions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Account) (ent.Transactions, error)); ok {
		return rf(ctx, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Account) ent.Transactions); ok {
		r0 = rf(ctx, account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ent.Transactions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Account) error); ok {
		r1 = rf(ctx, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: ctx, id
func (_m *Accounts) GetAccount(ctx context.Context, id int) (*ent.Account, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *ent.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*ent.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *ent.Account); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncomingTransactions provides a mock function with given fields: ctx, account
func (_m *Accounts) IncomingTransactions(ctx context.Context, account *ent.Account) (ent.Transactions, error) {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for IncomingTransactions")
	}

	var r0 ent.Transactions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Account) (ent.Transactions, error)); ok {
		return rf(ctx, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Account) ent.Transactions); ok {
		r0 = rf(ctx, account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ent.Transactions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Account) error); ok {
		r1 = rf(ctx, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OutgoingTransactions provides a mock function with given fields: ctx, account
func (_m *Accounts) OutgoingTransactions(ctx context.Context, account *ent.Account) (ent.Transactions, error) {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for OutgoingTransactions")
	}

	var r0 ent.Transactions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Account) (ent.Transactions, error)); ok {
		return rf(ctx, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Account) ent.Transactions); ok {
		r0 = rf(ctx, account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ent.Transactions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Account) error); ok {
		r1 = rf(ctx, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: ctx, fromAccount, toAccount, amount
func (_m *Accounts) Transfer(ctx context.Context, fromAccount *ent.Account, toAccount *ent.Account, amount float64) (*ent.Transaction, error) {
	ret := _m.Called(ctx, fromAccount, toAccount, amount)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 *ent.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Account, *ent.Account, float64) (*ent.Transaction, error)); ok {
		return rf(ctx, fromAccount, toAccount, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Account, *ent.Account, float64) *ent.Transaction); ok {
		r0 = rf(ctx, fromAccount, toAccount, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Account, *ent.Account, float64) error); ok {
		r1 = rf(ctx, fromAccount, toAccount, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccounts creates a new instance of Accounts. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccounts(t interface {
	mock.TestingT
	Cleanup(func())
}) *Accounts {
	mock := &Accounts{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
